name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: 
      - "master"
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        image: [ 
          {
            name: nginx,
            path: ./docker/dockerfiles/site.dockerfile
          },
          {
            name: goatcounter,
            path: ./docker/dockerfiles/goatcounter.dockerfile
          }
        ]
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository.
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # Uses the `docker/login-action` action to log in to the Container registry registry using
      # the account and password that will publish the packages. Once published, the packages are
      # scoped to the account defined here.
      - name: Log in to the Container registry.
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to 
      # extract tags and labels that will be applied to the specified image. The `id` "meta" allows the 
      # output of this step to be referenced in a subsequent step. The `images` value provides the base 
      # name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker.
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image.name }}
          tags: |
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Set up QEMU.
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your 
      # repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located 
      # in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" 
      # in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image.
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.image.path }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
